set nocompatible

filetype off
"git clone https://github.com/junegunn/vim-plug.git ~/.vim/vim-plug.git
"copy vim-plug.vim ~/.vim/autoload/
call plug#begin()
"default plugin directory is ~/.vim/plugged
Plug 'dense-analysis/ale'
Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'preservim/nerdcommenter'
Plug 'junegunn/vim-easy-align'
Plug 'junegunn/fzf.vim' "fuzzy finder
Plug 'mhinz/vim-signify'
Plug 'vim-scripts/winmanager'
"Plug 'ctrlpvim/ctrlp.vim'
"Plug 'neoclide/coc.nvim', {'branch': 'release'}
"Plug 'ludovicchabant/vim-gutentags'
"Plug 'ycm-core/YouCompleteMe', { 'do': './install.py --clangd-completer'}
"Plug 'rdnetto/YCM-Generator', { 'branch': 'stable'}
call plug#end()

""""""""""""""""""""""Vundle""""""""""""""""""""""""""""""""""""""""""""""""
"git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'ycm-core/YouCompleteMe'
Plugin 'rdnetto/YCM-Generator'
"maybe need to install ctags first in case error not an editor command
Plugin 'taglist.vim'
Plugin 'scrooloose/nerdtree'
"Plugin 'tomasr/molokai'
Plugin 'altercation/vim-colors-solarized'
Plugin 'google/yapf', {'rtp': 'plugins/vim'}
Plugin 'rking/ag.vim'
Plugin 'Shougo/vimproc'
Plugin 'Shougo/vimshell.vim'
call vundle#end()
filetype plugin indent on
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"set tags=./.tags;,.tags
"set autochdir
syntax enable
syntax on
"darkblue desert delek elflord koehler pablo
colorscheme desert
highlight Search cterm=NONE ctermfg=grey ctermbg=white

set number
set hlsearch incsearch

"expand [tab] to [space]
set expandtab
"1 [tab] to 2 [space]
set softtabstop=4
"set tabstop=4
set shiftwidth=4
"set guifont=YaHei\ Consolas\ Hybrid\ 11.5
set guifont=Consolas:h12 "under windows
"hi Comment ctermfg=244
set smartcase
set colorcolumn=110
set cursorline
set mouse=a
set ofu=syntaxcomplete#Complete   "ctrl + n
"set autoindent
set showmatch
set laststatus =2
set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %{strftime(\"%d/%m/%y\ -\ %H:%M\")}
set tabpagemax=15

vnoremap <C-c> :s/^/\/\//<Enter>
vnoremap <C-\> :s/^\/\///<Enter>

let mapleader = "," 
nnoremap <C-e> :q!<CR>


"""""""""""gutentags""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project']
"let g:gutentags_ctags_tagfile = '.tags'
"let s:vim_tags = expand('~/.cache/tags')
"let g:gutentags_cache_dir = s:vim_tags
"let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
"let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
"let g:gutentags_ctags_extra_args += ['--c-kinds=+px']
"
"if !isdirectory(s:vim_tags)
"   silent! call mkdir(s:vim_tags, 'p')
"endif
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""async linting engine""""""""""""""""""""""""""""""""""""""""
let g:ale_enabled=1
"highlight clear ALEErrorSign
"highlight clear ALEWarningSign
let g:ale_sign_error = "\ue001"
"let g:ale_linters_explicit = 1
let g:ale_completion_delay = 500
let g:ale_echo_delay = 20
let g:ale_lint_delay = 500
let g:ale_echo_msg_format = '[%linter%] %code: %%s'
let g:ale_lint_on_text_changed = 'normal'
let g:ale_lint_on_insert_leave = 1
let g:airline#extensions#ale#enabled = 1
let g:ale_c_gcc_options = '-Wall -O2 -std=c99'
let g:ale_cpp_gcc_options = '-Wall -O2 -std=c++14'
let g:ale_c_cppcheck_options = ''
let g:ale_cpp_cppcheck_options = ''
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""TagList"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <F3> :TlistToggle<CR>
let Tlist_Compact_Format=1
let Tlist_Use_Right_Window=1
let Tlist_Show_One_File=1  
let Tlist_Auto_Highlight_tag=1
let Tlist_Auto_Update=1
let Tlist_WinWidth=30       
let Tlist_Exit_OnlyWindow=1 
let Tlist_Use_SingClick=1
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""NerdTree"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <F2> :NERDTreeToggle<CR>
let NERDChristmasTree=1
let NERDTreeAutoCenter=1
let NERDTreeMouseMode=2
let NERDTreeQuitOnOpen=0
let NERDTreeShowFiles=1
let NERDTreeShowHidden=1
let NERDTreeHightCursorline=1
let NERDTreeShowLineNumbers=0
let NERDTreeWinPos='left'
let NERDTreeWinSize=31
let NERDTreeMinimalUI=1
autocmd vimenter * if !argc() | NERDTree | endif  "auto open nerdtree when open vim without file
"auto close when only nerdtree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
set autoread
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""YouCompleteMe""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <F4> : YcmDiags<CR>!
"nnoremap <leader>j :YcmCompleter GoToImprecise<CR>
nnoremap <leader>ed :YcmCompleter GoToDefinitionElseDeclaration<CR>   
nnoremap <leader>ei :YcmCompleter GoToImplementationElseDeclaration<CR>
nnoremap <leader>d :YcmCompleter GoToDefinition<CR>
nnoremap <leader>g :YcmCompleter GoTo<CR>
"nnoremap <leader>h <plug>(YCMHover)
nnoremap <leader>i :YcmCompleter GoToInclude<CR>
nnoremap <leader>l :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>n :YcmCompleter RefactorRename<CR>
nnoremap <leader>o :YcmCompleter GetDoc<CR>
nnoremap <leader>p :YcmCompleter GetParent<CR>
nnoremap <leader>r :YcmCompleter GoToReferences<CR>
nnoremap <leader>s :YcmCompleter GoToSymbol<CR>
nnoremap <leader>t :YcmCompleter GetType<CR>

"let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py' 
let g:ycm_use_clangd = 1
"let g:ycm_clangd_binary_path='~/clangd'
let g:ycm_disable_for_files_larger_than_kb = 1000
let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py' 
let g:ycm_confirm_extra_conf=0   "打开vim时不再询问是否加载ycm_extra_conf.py配置
let g:ycm_seed_identifiers_with_syntax=1
let g:ycm_collect_identifiers_from_tag_files = 1 "使用ctags生成的tags文件
let g:ycm_complete_in_comments = 1
let g:ycm_complete_in_strings = 1
let g:ycm_key_invoke_completion = '<A-c>'
let g:ycm_goto_buffer_command = 'vertical-split'
let g:enable_ycm_at_startup = 0
let g:ycm_error_symbol = '>>'
let g:ycm_warning_symbol = '>'
let g:ycm_auto_hover = ''  " 'CursorHold': auto popup hint after a delay
let g:ycm_auto_trigger = 1
let g:ycm_keep_logfiles = 0
let g:ycm_log_level = 'info'
let g:ycm_key_detailed_diagnostics = '<leader>`'
let g:ycm_always_populate_location_list = 1
let g:ycm_enable_diagnostic_signs = 1
let g:ycm_enable_diagnostic_highlighting = 0
highlight YcmErrorLine guibg=#3f0000
highlight YcmWarningLine guibg=#3f0000
highlight PMenu ctermfg=0 ctermbg=242 guifg=black guibg=darkgrey
highlight PMenuSel ctermfg=242 ctermbg=8 guifg=darkgrey guibg=black
"          YcmErrorSign
"          YcmWarningSign
let g:ycm_filetype_whitelist = { 
		\ "c":1,
		\ "cpp":1, 
                \ "hpp":1,
		\ "objc":1,
		\ "sh":1,
		\ "zsh":1
		\ }
let g:ycm_filetype_blacklist = {
        \ 'tagbar' : 1,
        \ 'qf' : 1,
        \ 'notes' : 1,
        \ 'markdown' : 1,
        \ 'unite' : 1,
        \ 'text' : 1,
        \ 'vimwiki' : 1,
        \ 'pandoc' : 1,
        \ 'infolog' : 1,
        \ 'mail' : 1
        \}
"let g:ycm_filetype_specific_completion_to_disable = {
"        \ 'gitcommit': 1
"        \}
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"grammar error check, but i use it for mapping
iabbrev <leader>@@ --<cr>helloworld@mail.com

"nmap ---------- normal mode
"vmap ---------- visual mode
"imap ---------- insert mode
"non-recursive map
"nnoremap <F2> :Sexplore!<cr>

nnoremap <leader>n :set number!<cr>
nnoremap <leader>bn :bnext<cr>
nnoremap <leader>bp :bprevious<cr>
nnoremap <leader>bf :bfirst<cr>
nnoremap <leader>bl :blast<cr>
nnoremap <leader>l :ls<cr>
nnoremap <leader>ba :badd<cr>
nnoremap <leader>bu :bunload<cr>
nnoremap <leader>bd :bdelete<cr>
nnoremap <leader>vsb :vertical sb<cr>

""""""
"obsolete
""""""
""""""CSCOPE"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"find ~/stl/sgi -regex ".*\.\(cpp\|c\|h\|hpp\)$" > cscope.files
"set cscopequickfix=s-,c-,d-,i-,t-,e-
"if has("cscope")
"    set cscopetag
"    set csto=0
"    set nocsverb
"    if filereadable("cscope.out")
"        cs add cscope.out
"    elseif $CSCOPE_DB != ""
"        cs add $CSCOPE_DB
"    endif
"    set cscopeverbose
" endif
"nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
"nmap <C-@>s :scs find s <C-R>=expand("<cword>")<CR><CR>
"nmap <C-@><C-@>s :vert scs find s <C-R>=expand("<cword>")<CR><CR>   
"
"nnoremap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
"nnoremap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
"nnoremap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
"nnoremap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
"nnoremap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
"nnoremap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
"nnoremap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
"nnoremap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>
"
"nnoremap <C-\><C-\>s :vert scs find s <C-R>=expand("<cword>")<CR><CR>
"nnoremap <C-\><C-\>g :vert scs find g <C-R>=expand("<cword>")<CR><CR>
"nnoremap <C-\><C-\>c :vert scs find c <C-R>=expand("<cword>")<CR><CR>
"nnoremap <C-\><C-\>t :vert scs find t <C-R>=expand("<cword>")<CR><CR>
"nnoremap <C-\><C-\>e :vert scs find e <C-R>=expand("<cword>")<CR><CR>
"nnoremap <C-\><C-\>f :vert scs find f <C-R>=expand("<cfile>")<CR><CR>
"nnoremap <C-\><C-\>i :vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
"nnoremap <C-\><C-\>d :vert scs find d <C-R>=expand("<cword>")<CR><CR>
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

